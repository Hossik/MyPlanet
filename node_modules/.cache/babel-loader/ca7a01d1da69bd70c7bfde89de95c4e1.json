{"ast":null,"code":"const domParse = require('./dom-parse.js');\n\nconst nodeStore = require('./nodeStore.js');\n\nconst assert = require('./assert.js');\n\nlet topNode;\nlet firstPass = true; // importing React from example app\n\nfunction injector(React, parentNode) {\n  topNode = parentNode;\n  startTraverse(parentNode);\n  const func = React.Component.prototype.setState;\n\n  React.Component.prototype.setState = function (...args) {\n    // set timeout to delay traverse so that it is appended to original setState\n    startTraverse(this);\n    return func.apply(this, args);\n  }; // listens for messages from backgroundjs -> content script -> webpage\n\n\n  window.addEventListener('message', function (event) {\n    // only accept messges to self\n    if (event.source != window) return; // filter out other messages floating around in existing context\n\n    if (event.data.type === 'assertion') {\n      if (event.data.flag === 'onload') {\n        event.data.message.forEach(item => {\n          assert.addAssert(item);\n        });\n        startTraverse(parentNode);\n      } else if (event.data.flag === 'delete') {\n        assert.deleteBlock(event.data.message);\n      } else {\n        assert.addAssert(event.data.message);\n      }\n    }\n  }, false);\n}\n\nfunction startTraverse(self, reactDom) {\n  const nodePackage = {};\n  setTimeout(() => {\n    let travPromise = throttle(domParse.parser, 25);\n    travPromise.then(result => {\n      // Conditional to display feedback for react router incompatibility\n      if (result === 'react-router') {\n        window.postMessage({\n          type: 'virtualdom',\n          data: 'react-router'\n        }, \"*\");\n      } else {\n        nodePackage.virtualDom = result;\n        nodePackage.nodeStore = nodeStore.storage;\n        let title = document.title; // specify message type to target specific message\n\n        window.postMessage({\n          type: 'virtualdom',\n          data: nodePackage,\n          topNode: topNode.constructor.name,\n          title: title,\n          first: firstPass\n        }, \"*\");\n        firstPass = false;\n      }\n    });\n  }, 0);\n}\n\nfunction throttle(func, wait) {\n  let waiting = false;\n  return new Promise((resolve, reject) => {\n    if (waiting) reject();\n    waiting = true;\n    setTimeout(() => {\n      waiting = false;\n      let result = func(topNode);\n      resolve(result);\n    }, wait);\n    return func(topNode);\n  });\n}\n\nmodule.exports = injector;","map":{"version":3,"sources":["/home/hoss/my App/my-app/node_modules/react-vt/src/inject.js"],"names":["domParse","require","nodeStore","assert","topNode","firstPass","injector","React","parentNode","startTraverse","func","Component","prototype","setState","args","apply","window","addEventListener","event","source","data","type","flag","message","forEach","item","addAssert","deleteBlock","self","reactDom","nodePackage","setTimeout","travPromise","throttle","parser","then","result","postMessage","virtualDom","storage","title","document","constructor","name","first","wait","waiting","Promise","resolve","reject","module","exports"],"mappings":"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","sourcesContent":["const domParse = require('./dom-parse.js');\nconst nodeStore = require('./nodeStore.js');\n\nconst assert = require('./assert.js');\nlet topNode;\nlet firstPass = true;  \n\n// importing React from example app\nfunction injector(React, parentNode) {\n  topNode = parentNode;\n  startTraverse(parentNode);\n  const func = React.Component.prototype.setState;\n  React.Component.prototype.setState = function(...args) {\n    // set timeout to delay traverse so that it is appended to original setState\n    startTraverse(this);\n    return func.apply(this, args);\n  }\n  // listens for messages from backgroundjs -> content script -> webpage\n  window.addEventListener('message', function(event) {\n    // only accept messges to self\n    if (event.source != window) return;\n    // filter out other messages floating around in existing context\n\n    if (event.data.type === 'assertion') {\n      if (event.data.flag === 'onload') {\n        event.data.message.forEach(item => {\n          assert.addAssert(item); \n        });\n        startTraverse(parentNode);\n      } else if (event.data.flag === 'delete') {\n        assert.deleteBlock(event.data.message);\n      } else {\n        assert.addAssert(event.data.message);\n      }\n    }\n  }, false);\n}\n\nfunction startTraverse(self, reactDom) {\n  const nodePackage = {}; \n  setTimeout(()=> {\n      let travPromise = throttle(domParse.parser, 25);\n      travPromise.then((result) => {\n        // Conditional to display feedback for react router incompatibility\n        if (result === 'react-router') {\n          window.postMessage({ type: 'virtualdom', data: 'react-router' }, \"*\");\n        } else {\n          nodePackage.virtualDom = result;\n          nodePackage.nodeStore = nodeStore.storage;\n          let title = document.title;\n          // specify message type to target specific message\n          window.postMessage({ type: 'virtualdom', data: nodePackage, topNode: topNode.constructor.name, title: title, first: firstPass}, \"*\");\n          firstPass = false;\n        }\n      });\n  }, 0);\n}\n\nfunction throttle(func, wait) {\n  let waiting = false; \n  return new Promise((resolve, reject) => {\n    if (waiting) reject(); \n    waiting = true; \n    setTimeout(() => {\n      waiting = false;\n      let result = func(topNode);\n      resolve(result);\n    }, wait);\n   return func(topNode);\n  }); \n}\n\nmodule.exports = injector;\n"]},"metadata":{},"sourceType":"script"}