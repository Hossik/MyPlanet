{"ast":null,"code":"'use strict';\n\nmodule.exports = {\n  fromMs,\n  fromS,\n  toMs,\n  toS\n};\n\nconst zeroFill = require('zero-fill'); // Time units with their corresponding values in miliseconds\n\n\nconst HOUR = 3600000;\nconst MINUTE = 60000;\nconst SECOND = 1000;\nconst TIME_FORMAT_ERRMSG = 'Time format error'; // =============================================================================\n// Export functions\n// =============================================================================\n\nfunction fromMs(ms, format = 'mm:ss') {\n  if (typeof ms !== 'number' || Number.isNaN(ms)) {\n    throw new Error('NaN error');\n  }\n\n  let absMs = Math.abs(ms);\n  let negative = ms < 0;\n  let hours = Math.floor(absMs / HOUR);\n  let minutes = Math.floor(absMs % HOUR / MINUTE);\n  let seconds = Math.floor(absMs % MINUTE / SECOND);\n  let miliseconds = Math.floor(absMs % SECOND);\n  return formatTime({\n    negative,\n    hours,\n    minutes,\n    seconds,\n    miliseconds\n  }, format);\n}\n\nfunction fromS(s, format = 'mm:ss') {\n  if (typeof s !== 'number' || Number.isNaN(s)) {\n    throw new Error('NaN error');\n  }\n\n  let ms = s * SECOND;\n  return fromMs(ms, format);\n}\n\nfunction toMs(time, format = 'mm:ss') {\n  let re;\n\n  if (['mm:ss', 'mm:ss.sss', 'hh:mm:ss', 'hh:mm:ss.sss'].includes(format)) {\n    re = /^(-)?(?:(\\d\\d+):)?(\\d\\d):(\\d\\d)(\\.\\d+)?$/;\n  } else if (format === 'hh:mm') {\n    re = /^(-)?(\\d\\d):(\\d\\d)(?::(\\d\\d)(?:(\\.\\d+))?)?$/;\n  } else {\n    throw new Error(TIME_FORMAT_ERRMSG);\n  }\n\n  let result = re.exec(time);\n  if (!result) throw new Error();\n  let negative = result[1] === '-';\n  let hours = result[2] | 0;\n  let minutes = result[3] | 0;\n  let seconds = result[4] | 0;\n  let miliseconds = Math.floor(1000 * result[5] | 0);\n\n  if (minutes > 60 || seconds > 60) {\n    throw new Error();\n  }\n\n  return (negative ? -1 : 1) * (hours * HOUR + minutes * MINUTE + seconds * SECOND + miliseconds);\n}\n\nfunction toS(time, format = 'mm:ss') {\n  let ms = toMs(time, format);\n  return Math.floor(ms / SECOND);\n} // =============================================================================\n// Utility functions\n// =============================================================================\n\n\nfunction formatTime(time, format) {\n  let showMs;\n  let showSc;\n  let showHr;\n\n  switch (format.toLowerCase()) {\n    case 'hh:mm:ss.sss':\n      showMs = true;\n      showSc = true;\n      showHr = true;\n      break;\n\n    case 'hh:mm:ss':\n      showMs = !!time.miliseconds;\n      showSc = true;\n      showHr = true;\n      break;\n\n    case 'hh:mm':\n      showMs = !!time.miliseconds;\n      showSc = showMs || !!time.seconds;\n      showHr = true;\n      break;\n\n    case 'mm:ss':\n      showMs = !!time.miliseconds;\n      showSc = true;\n      showHr = !!time.hours;\n      break;\n\n    case 'mm:ss.sss':\n      showMs = true;\n      showSc = true;\n      showHr = !!time.hours;\n      break;\n\n    default:\n      throw new Error(TIME_FORMAT_ERRMSG);\n  }\n\n  let hh = zeroFill(2, time.hours);\n  let mm = zeroFill(2, time.minutes);\n  let ss = zeroFill(2, time.seconds);\n  let sss = zeroFill(3, time.miliseconds);\n  return (time.negative ? '-' : '') + (showHr ? showMs ? `${hh}:${mm}:${ss}.${sss}` : showSc ? `${hh}:${mm}:${ss}` : `${hh}:${mm}` : showMs ? `${mm}:${ss}.${sss}` : `${mm}:${ss}`);\n}","map":{"version":3,"sources":["/home/hoss/my App/my-app/node_modules/hh-mm-ss/index.js"],"names":["module","exports","fromMs","fromS","toMs","toS","zeroFill","require","HOUR","MINUTE","SECOND","TIME_FORMAT_ERRMSG","ms","format","Number","isNaN","Error","absMs","Math","abs","negative","hours","floor","minutes","seconds","miliseconds","formatTime","s","time","re","includes","result","exec","showMs","showSc","showHr","toLowerCase","hh","mm","ss","sss"],"mappings":"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","sourcesContent":["'use strict'\n\nmodule.exports = {\n  fromMs,\n  fromS,\n  toMs,\n  toS\n}\n\nconst zeroFill = require('zero-fill')\n\n// Time units with their corresponding values in miliseconds\nconst HOUR = 3600000\nconst MINUTE = 60000\nconst SECOND = 1000\n\nconst TIME_FORMAT_ERRMSG = 'Time format error'\n\n// =============================================================================\n// Export functions\n// =============================================================================\n\nfunction fromMs (ms, format = 'mm:ss') {\n  if (typeof ms !== 'number' || Number.isNaN(ms)) {\n    throw new Error('NaN error')\n  }\n\n  let absMs = Math.abs(ms)\n\n  let negative = (ms < 0)\n  let hours = Math.floor(absMs / HOUR)\n  let minutes = Math.floor(absMs % HOUR / MINUTE)\n  let seconds = Math.floor(absMs % MINUTE / SECOND)\n  let miliseconds = Math.floor(absMs % SECOND)\n\n  return formatTime({\n    negative, hours, minutes, seconds, miliseconds\n  }, format)\n}\n\nfunction fromS (s, format = 'mm:ss') {\n  if (typeof s !== 'number' || Number.isNaN(s)) {\n    throw new Error('NaN error')\n  }\n\n  let ms = s * SECOND\n\n  return fromMs(ms, format)\n}\n\nfunction toMs (time, format = 'mm:ss') {\n  let re\n\n  if (['mm:ss', 'mm:ss.sss', 'hh:mm:ss', 'hh:mm:ss.sss'].includes(format)) {\n    re = /^(-)?(?:(\\d\\d+):)?(\\d\\d):(\\d\\d)(\\.\\d+)?$/\n  } else if (format === 'hh:mm') {\n    re = /^(-)?(\\d\\d):(\\d\\d)(?::(\\d\\d)(?:(\\.\\d+))?)?$/\n  } else {\n    throw new Error(TIME_FORMAT_ERRMSG)\n  }\n\n  let result = re.exec(time)\n  if (!result) throw new Error()\n\n  let negative = result[1] === '-'\n  let hours = result[2] | 0\n  let minutes = result[3] | 0\n  let seconds = result[4] | 0\n  let miliseconds = Math.floor(1000 * result[5] | 0)\n\n  if (minutes > 60 || seconds > 60) {\n    throw new Error()\n  }\n\n  return (negative ? -1 : 1) * (\n    hours * HOUR + minutes * MINUTE + seconds * SECOND + miliseconds\n  )\n}\n\nfunction toS (time, format = 'mm:ss') {\n  let ms = toMs(time, format)\n  return Math.floor(ms / SECOND)\n}\n\n// =============================================================================\n// Utility functions\n// =============================================================================\n\nfunction formatTime (time, format) {\n  let showMs\n  let showSc\n  let showHr\n\n  switch (format.toLowerCase()) {\n    case 'hh:mm:ss.sss':\n      showMs = true\n      showSc = true\n      showHr = true\n      break\n    case 'hh:mm:ss':\n      showMs = !(!time.miliseconds)\n      showSc = true\n      showHr = true\n      break\n    case 'hh:mm':\n      showMs = !(!time.miliseconds)\n      showSc = showMs || !(!time.seconds)\n      showHr = true\n      break\n    case 'mm:ss':\n      showMs = !(!time.miliseconds)\n      showSc = true\n      showHr = !(!time.hours)\n      break\n    case 'mm:ss.sss':\n      showMs = true\n      showSc = true\n      showHr = !(!time.hours)\n      break\n    default:\n      throw new Error(TIME_FORMAT_ERRMSG)\n  }\n\n  let hh = zeroFill(2, time.hours)\n  let mm = zeroFill(2, time.minutes)\n  let ss = zeroFill(2, time.seconds)\n  let sss = zeroFill(3, time.miliseconds)\n\n  return (time.negative ? '-' : '') + (showHr ? (\n    showMs ? `${hh}:${mm}:${ss}.${sss}` : showSc ? `${hh}:${mm}:${ss}` : `${hh}:${mm}`\n  ) : (\n    showMs ? `${mm}:${ss}.${sss}` : `${mm}:${ss}`\n  ))\n}\n"]},"metadata":{},"sourceType":"script"}