{"ast":null,"code":"var youtubedl = require('youtube-dl');\n\nvar parser = require('./modules/url-parser');\n\nvar path = require('path');\n\nvar fs = require('fs');\n\nvar Q = require('q');\n\nmodule.exports = function (urlOrVidId) {\n  var url = parser(urlOrVidId);\n  return {\n    snapshot: function (time, filePath, format) {\n      var snapShot = require('./modules/snapshot');\n\n      var video = youtubedl(url, format, {\n        cwd: __dirname\n      });\n      var snapshotFilePath = path.resolve(__dirname, 'tmp', 'snap-' + +new Date() + '.jpg');\n      var videoFilePath = path.resolve(__dirname, 'tmp', 'video-' + +new Date() + '.mp4');\n      var ws = fs.createWriteStream(videoFilePath);\n      var deferred = Q.defer();\n\n      var checkSnap = function () {\n        snapShot(videoFilePath, time, snapshotFilePath, filePath, function (err) {\n          if (err) return setTimeout(checkSnap, 200);\n          ws.emit('close');\n          fs.unlink(snapshotFilePath);\n          fs.unlink(videoFilePath);\n          deferred.resolve();\n        });\n      };\n\n      video.pipe(ws);\n      video.on('info', checkSnap);\n      video.on('end', function () {\n        snapShot(videoFilePath, time, snapshotFilePath, filePath, function (err) {\n          fs.unlink(snapshotFilePath);\n          fs.unlink(videoFilePath);\n          if (err) return deferred.reject(err);\n          deferred.resolve();\n        });\n      });\n      return deferred.promise;\n    },\n    crop: function (startTime, endTime, filePath, format) {\n      var sec = require('sec');\n\n      var snapShot = require('./modules/snapshot');\n\n      var crop = require('./modules/crop');\n\n      var video = youtubedl(url, format, {\n        cwd: __dirname\n      });\n      var tmpSnap = path.resolve(__dirname, 'tmp', 'snap-' + +new Date() + '.jpg');\n      var cropFilePath = path.resolve(__dirname, 'tmp', 'crop-' + +new Date() + '.mp4');\n      var videoFilePath = path.resolve(__dirname, 'tmp', 'video-' + +new Date() + '.mp4');\n      var ws = fs.createWriteStream(videoFilePath);\n      var deferred = Q.defer();\n      var duration = sec(endTime) - sec(startTime);\n\n      var checkCrop = function () {\n        if (duration < 1) {\n          ws.emit('close');\n          return deferred.reject(new Error('The end time needs to be greather than start time'));\n        } else {\n          snapShot(videoFilePath, endTime, tmpSnap, null, function (err) {\n            if (err) return setTimeout(checkCrop, 200);\n            ws.emit('close');\n            crop(startTime, duration, videoFilePath, cropFilePath, filePath, function (err) {\n              fs.unlink(videoFilePath);\n              fs.unlink(cropFilePath);\n              fs.unlink(tmpSnap);\n              if (err) return deferred.reject(err);\n              deferred.resolve();\n            });\n          });\n        }\n      };\n\n      video.pipe(ws);\n      video.on('info', checkCrop);\n      video.on('end', function () {\n        crop(startTime, duration, videoFilePath, cropFilePath, filePath, function (err) {\n          fs.unlink(videoFilePath);\n          fs.unlink(cropFilePath);\n          fs.unlink(tmpSnap);\n          if (err) return deferred.reject(err);\n          deferred.resolve();\n        });\n      });\n      return deferred.promise;\n    },\n    gif: function (startTime, endTime, filePath, size, fps) {\n      var sec = require('sec');\n\n      var gif = require('./modules/gif.js');\n\n      var deferred = Q.defer();\n      var cropFilePath = path.resolve(__dirname, 'tmp', 'crop-' + +new Date() + '.mp4');\n      var duration = sec(endTime) - sec(startTime);\n      this.crop(startTime, endTime, cropFilePath).then(function () {\n        gif(cropFilePath, filePath, '00', duration, size, fps, function (err) {\n          fs.unlink(cropFilePath);\n          if (err) return deferred.reject(err);\n          deferred.resolve();\n        });\n      }).catch(function (err) {\n        deferred.reject(err);\n      });\n      return deferred.promise;\n    },\n    download: function (filePath, format) {\n      var video = youtubedl(url, format, {\n        cwd: __dirname\n      });\n      var videoFilePath = path.resolve(__dirname, 'tmp', 'video-' + +new Date() + '.mp4');\n      var ws = fs.createWriteStream(videoFilePath);\n\n      var move = require('./modules/move');\n\n      var deferred = Q.defer();\n      video.pipe(ws);\n      video.on('end', function () {\n        move(videoFilePath, filePath).then(function () {\n          fs.unlink(videoFilePath);\n          deferred.resolve();\n        }).catch(function () {\n          fs.unlink(videoFilePath);\n          deferred.reject();\n        });\n      });\n      return deferred.promise;\n    }\n  };\n};","map":{"version":3,"sources":["/home/hoss/my App/my-app/node_modules/youtube.com/script.js"],"names":["youtubedl","require","parser","path","fs","Q","module","exports","urlOrVidId","url","snapshot","time","filePath","format","snapShot","video","cwd","__dirname","snapshotFilePath","resolve","Date","videoFilePath","ws","createWriteStream","deferred","defer","checkSnap","err","setTimeout","emit","unlink","pipe","on","reject","promise","crop","startTime","endTime","sec","tmpSnap","cropFilePath","duration","checkCrop","Error","gif","size","fps","then","catch","download","move"],"mappings":"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","sourcesContent":["var youtubedl   = require('youtube-dl');\nvar parser      = require('./modules/url-parser');\nvar path        = require('path');\nvar fs          = require('fs');\nvar Q           = require('q');\n\nmodule.exports = function (urlOrVidId) {\n    \n    var url = parser(urlOrVidId);\n    \n    return {\n        snapshot : function (time, filePath, format) {\n            var snapShot            = require('./modules/snapshot');\n            var video               = youtubedl(url, format, { cwd: __dirname });\n            var snapshotFilePath    = path.resolve(__dirname, 'tmp', 'snap-'+ ( + new Date() ) + '.jpg');\n            var videoFilePath       = path.resolve(__dirname, 'tmp', 'video-'+ ( + new Date() ) + '.mp4');\n            var ws                  = fs.createWriteStream(videoFilePath);\n            var deferred            = Q.defer();\n            var checkSnap           = function () {\n                snapShot(videoFilePath, time, snapshotFilePath, filePath, function (err) {\n                    if(err) return setTimeout(checkSnap, 200);\n                    ws.emit('close');\n                    fs.unlink(snapshotFilePath);\n                    fs.unlink(videoFilePath);\n                    deferred.resolve();\n                })\n            }\n\n            video.pipe(ws);\n            video.on('info', checkSnap);\n            video.on('end', function() {\n                snapShot(videoFilePath, time, snapshotFilePath, filePath, function (err) {\n                    fs.unlink(snapshotFilePath);\n                    fs.unlink(videoFilePath);\n                    if(err) return deferred.reject(err);\n                    deferred.resolve();\n                })\n            });\n\n            return deferred.promise;\n        },\n        crop : function (startTime, endTime, filePath, format) {\n            var sec             = require('sec');\n            var snapShot        = require('./modules/snapshot');\n            var crop            = require('./modules/crop');\n            var video           = youtubedl(url, format, { cwd: __dirname });\n            var tmpSnap         = path.resolve(__dirname, 'tmp', 'snap-'+ ( + new Date() ) + '.jpg');\n            var cropFilePath    = path.resolve(__dirname, 'tmp', 'crop-'+ ( + new Date() ) + '.mp4');\n            var videoFilePath   = path.resolve(__dirname, 'tmp', 'video-'+ ( + new Date() ) + '.mp4');\n            var ws              = fs.createWriteStream(videoFilePath);\n            var deferred        = Q.defer();\n            var duration        = sec(endTime) - sec(startTime);\n            var checkCrop       = function () {\n                if(duration < 1) {\n                    ws.emit('close');\n                    return deferred.reject(new Error('The end time needs to be greather than start time'));\n                } else {\n                    snapShot(videoFilePath, endTime, tmpSnap, null, function (err) {\n                        if(err) return setTimeout(checkCrop, 200);\n                        ws.emit('close');\n                        crop(startTime, duration, videoFilePath, cropFilePath, filePath, function (err) {\n                            fs.unlink(videoFilePath);\n                            fs.unlink(cropFilePath);\n                            fs.unlink(tmpSnap);\n                            if(err) return deferred.reject(err);\n                            deferred.resolve();\n                        })\n                    })\n                }\n            }\n\n            video.pipe(ws);\n            video.on('info', checkCrop);\n            video.on('end', function() {\n                crop(startTime, duration, videoFilePath, cropFilePath, filePath, function (err) {\n                    fs.unlink(videoFilePath);\n                    fs.unlink(cropFilePath);\n                    fs.unlink(tmpSnap);\n                    if(err) return deferred.reject(err);\n                    deferred.resolve();\n                })\n            });\n\n            return deferred.promise;\n        },\n        gif : function (startTime, endTime, filePath, size, fps) {\n            var sec             = require('sec');\n            var gif             = require('./modules/gif.js')\n            var deferred        = Q.defer();\n            var cropFilePath    = path.resolve(__dirname, 'tmp', 'crop-'+ ( + new Date() ) + '.mp4');\n            var duration        = sec(endTime) - sec(startTime);\n            this.crop(startTime, endTime, cropFilePath)\n                .then(function () {\n                    gif(cropFilePath, filePath, '00', duration, size, fps, function (err) {\n                        fs.unlink(cropFilePath);\n                        if(err) return deferred.reject(err);\n                        deferred.resolve();\n                    })\n                }).catch(function(err) {\n                    deferred.reject(err)\n                })\n\n            return deferred.promise;\n        },\n        download: function (filePath, format) {\n            var video           = youtubedl(url, format, { cwd: __dirname });\n            var videoFilePath   = path.resolve(__dirname, 'tmp', 'video-'+ ( + new Date() ) + '.mp4');\n            var ws              = fs.createWriteStream(videoFilePath);\n            var move            = require('./modules/move');\n            var deferred        = Q.defer();\n            video.pipe(ws);\n            video.on('end', function() {\n                move(videoFilePath, filePath)\n                    .then(function () {\n                        fs.unlink(videoFilePath);\n                        deferred.resolve();\n                    }).catch(function () {\n                        fs.unlink(videoFilePath);\n                        deferred.reject();\n                    })\n            });\n\n            return deferred.promise;\n        }\n    }\n}"]},"metadata":{},"sourceType":"script"}