{"ast":null,"code":"\"use strict\";\n\nfunction walkInternal(obj, iterator, context, originalObj, seen) {\n  var proto, prop;\n\n  if (typeof Object.getOwnPropertyNames !== \"function\") {\n    // We explicitly want to enumerate through all of the prototype's properties\n    // in this case, therefore we deliberately leave out an own property check.\n\n    /* eslint-disable guard-for-in */\n    for (prop in obj) {\n      iterator.call(context, obj[prop], prop, obj);\n    }\n    /* eslint-enable guard-for-in */\n\n\n    return;\n  }\n\n  Object.getOwnPropertyNames(obj).forEach(function (k) {\n    if (seen[k] !== true) {\n      seen[k] = true;\n      var target = typeof Object.getOwnPropertyDescriptor(obj, k).get === \"function\" ? originalObj : obj;\n      iterator.call(context, k, target);\n    }\n  });\n  proto = Object.getPrototypeOf(obj);\n\n  if (proto) {\n    walkInternal(proto, iterator, context, originalObj, seen);\n  }\n}\n/* Walks the prototype chain of an object and iterates over every own property\n * name encountered. The iterator is called in the same fashion that Array.prototype.forEach\n * works, where it is passed the value, key, and own object as the 1st, 2nd, and 3rd positional\n * argument, respectively. In cases where Object.getOwnPropertyNames is not available, walk will\n * default to using a simple for..in loop.\n *\n * obj - The object to walk the prototype chain for.\n * iterator - The function to be called on each pass of the walk.\n * context - (Optional) When given, the iterator will be called with this object as the receiver.\n */\n\n\nmodule.exports = function walk(obj, iterator, context) {\n  return walkInternal(obj, iterator, context, obj, {});\n};","map":{"version":3,"sources":["/home/hoss/my App/my-app/node_modules/sinon/lib/sinon/util/core/walk.js"],"names":["walkInternal","obj","iterator","context","originalObj","seen","proto","prop","Object","getOwnPropertyNames","call","forEach","k","target","getOwnPropertyDescriptor","get","getPrototypeOf","module","exports","walk"],"mappings":"AAAA;;AAEA,SAASA,YAAT,CAAsBC,GAAtB,EAA2BC,QAA3B,EAAqCC,OAArC,EAA8CC,WAA9C,EAA2DC,IAA3D,EAAiE;AAC7D,MAAIC,KAAJ,EAAWC,IAAX;;AAEA,MAAI,OAAOC,MAAM,CAACC,mBAAd,KAAsC,UAA1C,EAAsD;AAClD;AACA;;AACA;AACA,SAAKF,IAAL,IAAaN,GAAb,EAAkB;AACdC,MAAAA,QAAQ,CAACQ,IAAT,CAAcP,OAAd,EAAuBF,GAAG,CAACM,IAAD,CAA1B,EAAkCA,IAAlC,EAAwCN,GAAxC;AACH;AACD;;;AAEA;AACH;;AAEDO,EAAAA,MAAM,CAACC,mBAAP,CAA2BR,GAA3B,EAAgCU,OAAhC,CAAwC,UAAUC,CAAV,EAAa;AACjD,QAAIP,IAAI,CAACO,CAAD,CAAJ,KAAY,IAAhB,EAAsB;AAClBP,MAAAA,IAAI,CAACO,CAAD,CAAJ,GAAU,IAAV;AACA,UAAIC,MAAM,GAAG,OAAOL,MAAM,CAACM,wBAAP,CAAgCb,GAAhC,EAAqCW,CAArC,EAAwCG,GAA/C,KAAuD,UAAvD,GACTX,WADS,GACKH,GADlB;AAEAC,MAAAA,QAAQ,CAACQ,IAAT,CAAcP,OAAd,EAAuBS,CAAvB,EAA0BC,MAA1B;AACH;AACJ,GAPD;AASAP,EAAAA,KAAK,GAAGE,MAAM,CAACQ,cAAP,CAAsBf,GAAtB,CAAR;;AACA,MAAIK,KAAJ,EAAW;AACPN,IAAAA,YAAY,CAACM,KAAD,EAAQJ,QAAR,EAAkBC,OAAlB,EAA2BC,WAA3B,EAAwCC,IAAxC,CAAZ;AACH;AACJ;AAED;;;;;;;;;;;;AAUAY,MAAM,CAACC,OAAP,GAAiB,SAASC,IAAT,CAAclB,GAAd,EAAmBC,QAAnB,EAA6BC,OAA7B,EAAsC;AACnD,SAAOH,YAAY,CAACC,GAAD,EAAMC,QAAN,EAAgBC,OAAhB,EAAyBF,GAAzB,EAA8B,EAA9B,CAAnB;AACH,CAFD","sourcesContent":["\"use strict\";\n\nfunction walkInternal(obj, iterator, context, originalObj, seen) {\n    var proto, prop;\n\n    if (typeof Object.getOwnPropertyNames !== \"function\") {\n        // We explicitly want to enumerate through all of the prototype's properties\n        // in this case, therefore we deliberately leave out an own property check.\n        /* eslint-disable guard-for-in */\n        for (prop in obj) {\n            iterator.call(context, obj[prop], prop, obj);\n        }\n        /* eslint-enable guard-for-in */\n\n        return;\n    }\n\n    Object.getOwnPropertyNames(obj).forEach(function (k) {\n        if (seen[k] !== true) {\n            seen[k] = true;\n            var target = typeof Object.getOwnPropertyDescriptor(obj, k).get === \"function\" ?\n                originalObj : obj;\n            iterator.call(context, k, target);\n        }\n    });\n\n    proto = Object.getPrototypeOf(obj);\n    if (proto) {\n        walkInternal(proto, iterator, context, originalObj, seen);\n    }\n}\n\n/* Walks the prototype chain of an object and iterates over every own property\n * name encountered. The iterator is called in the same fashion that Array.prototype.forEach\n * works, where it is passed the value, key, and own object as the 1st, 2nd, and 3rd positional\n * argument, respectively. In cases where Object.getOwnPropertyNames is not available, walk will\n * default to using a simple for..in loop.\n *\n * obj - The object to walk the prototype chain for.\n * iterator - The function to be called on each pass of the walk.\n * context - (Optional) When given, the iterator will be called with this object as the receiver.\n */\nmodule.exports = function walk(obj, iterator, context) {\n    return walkInternal(obj, iterator, context, obj, {});\n};\n"]},"metadata":{},"sourceType":"script"}