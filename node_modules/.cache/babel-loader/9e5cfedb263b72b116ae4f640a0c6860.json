{"ast":null,"code":"var ffmpeg = require('fluent-ffmpeg');\n\nvar move = require('./move');\n\nvar path = require('path');\n\nvar fileExists = require('file-exists');\n\nvar fs = require('fs');\n\nmodule.exports = function (videoFilePath, time, snapshotFilePath, filePath, cb) {\n  function snapCallBack() {\n    if (filePath) {\n      move(snapshotFilePath, path.resolve(filePath)).then(cb).catch(cb);\n    } else {\n      // fs.access not supported\n      cb(fileExists(snapshotFilePath) ? null : new Error(snapshotFilePath + ' not found'));\n    }\n  }\n\n  ffmpeg(videoFilePath).output(snapshotFilePath).seek(time).on('error', snapCallBack).on('end', snapCallBack).run();\n};","map":{"version":3,"sources":["/home/hoss/my App/my-app/node_modules/youtube.com/modules/snapshot.js"],"names":["ffmpeg","require","move","path","fileExists","fs","module","exports","videoFilePath","time","snapshotFilePath","filePath","cb","snapCallBack","resolve","then","catch","Error","output","seek","on","run"],"mappings":"AAAA,IAAIA,MAAM,GAAQC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIC,IAAI,GAAUD,OAAO,CAAC,QAAD,CAAzB;;AACA,IAAIE,IAAI,GAAUF,OAAO,CAAC,MAAD,CAAzB;;AACA,IAAIG,UAAU,GAAIH,OAAO,CAAC,aAAD,CAAzB;;AACA,IAAII,EAAE,GAAYJ,OAAO,CAAC,IAAD,CAAzB;;AAEAK,MAAM,CAACC,OAAP,GAAiB,UAAUC,aAAV,EAAyBC,IAAzB,EAA+BC,gBAA/B,EAAiDC,QAAjD,EAA2DC,EAA3D,EAA+D;AAC5E,WAASC,YAAT,GAAyB;AACrB,QAAGF,QAAH,EAAa;AACTT,MAAAA,IAAI,CAACQ,gBAAD,EAAmBP,IAAI,CAACW,OAAL,CAAaH,QAAb,CAAnB,CAAJ,CAA+CI,IAA/C,CAAoDH,EAApD,EAAwDI,KAAxD,CAA8DJ,EAA9D;AACH,KAFD,MAEO;AACH;AACAA,MAAAA,EAAE,CAACR,UAAU,CAACM,gBAAD,CAAV,GAA+B,IAA/B,GAAqC,IAAIO,KAAJ,CAAUP,gBAAgB,GAAG,YAA7B,CAAtC,CAAF;AACH;AACJ;;AAEDV,EAAAA,MAAM,CAACQ,aAAD,CAAN,CACKU,MADL,CACYR,gBADZ,EAEKS,IAFL,CAEUV,IAFV,EAGKW,EAHL,CAGQ,OAHR,EAGiBP,YAHjB,EAIKO,EAJL,CAIQ,KAJR,EAIeP,YAJf,EAKKQ,GALL;AAMH,CAhBD","sourcesContent":["var ffmpeg      = require('fluent-ffmpeg');\nvar move        = require('./move');\nvar path        = require('path');\nvar fileExists  = require('file-exists');\nvar fs          = require('fs');\n\nmodule.exports = function (videoFilePath, time, snapshotFilePath, filePath, cb) {\n    function snapCallBack () {\n        if(filePath) {\n            move(snapshotFilePath, path.resolve(filePath)).then(cb).catch(cb)\n        } else {\n            // fs.access not supported\n            cb(fileExists(snapshotFilePath) ? null: new Error(snapshotFilePath + ' not found'));\n        }\n    }\n\n    ffmpeg(videoFilePath)\n        .output(snapshotFilePath)\n        .seek(time)\n        .on('error', snapCallBack)\n        .on('end', snapCallBack)\n        .run();\n}"]},"metadata":{},"sourceType":"script"}