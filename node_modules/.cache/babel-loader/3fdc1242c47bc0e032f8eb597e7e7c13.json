{"ast":null,"code":"var _jsxFileName = \"/home/hoss/my App/my-app/src/components/TestComponent.js\";\nimport React, { Component } from 'react';\nimport ReactTextTransition, { presets } from \"react-text-transition\";\nconst texts = [\"Click\", \"or\", \"Die\"];\nconst secondtexts = [\"Click\", \"to\", \"Close\"];\nexport class Test extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      textIndex: 0\n    };\n\n    this.remove = () => {\n      this.state.textIndex > 10 ? clearInterval(this.intervalID) : this.intervalID = setInterval(() => {\n        this.setState({\n          textIndex: this.state.textIndex + 1\n        });\n      }, 2000);\n    };\n  }\n\n  componentDidMount() {\n    this.remove();\n  }\n\n  render() {\n    console.log(\"this.state.textIndex\", this.state.textIndex);\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      id: this.props.isOpen ? \"hossik\" : \"nohossik\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ReactTextTransition, {\n      text: this.props.isOpen ? secondtexts[this.state.textIndex % secondtexts.length] : texts[this.state.textIndex % texts.length],\n      spring: presets.gentle,\n      className: \"big\",\n      delay: 300,\n      inline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\nexport default Test;","map":{"version":3,"sources":["/home/hoss/my App/my-app/src/components/TestComponent.js"],"names":["React","Component","ReactTextTransition","presets","texts","secondtexts","Test","state","textIndex","remove","clearInterval","intervalID","setInterval","setState","componentDidMount","render","console","log","props","isOpen","length","gentle"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,mBAAP,IAA8BC,OAA9B,QAA6C,uBAA7C;AAEA,MAAMC,KAAK,GAAG,CAAC,OAAD,EAAU,IAAV,EAAgB,KAAhB,CAAd;AACA,MAAMC,WAAW,GAAG,CAAC,OAAD,EAAU,IAAV,EAAgB,OAAhB,CAApB;AACA,OAAO,MAAMC,IAAN,SAAmBL,SAAnB,CAA8B;AAAA;AAAA;AAAA,SACjCM,KADiC,GACzB;AACJC,MAAAA,SAAS,EAAE;AADP,KADyB;;AAAA,SAIrCC,MAJqC,GAI5B,MAAM;AACb,WAAKF,KAAL,CAAWC,SAAX,GAAqB,EAArB,GAA2BE,aAAa,CAAC,KAAKC,UAAN,CAAxC,GACE,KAAKA,UAAL,GAAkBC,WAAW,CAAC,MAAM;AACpC,aAAKC,QAAL,CAAc;AACZL,UAAAA,SAAS,EAAE,KAAKD,KAAL,CAAWC,SAAX,GAAuB;AADtB,SAAd;AAGD,OAJ8B,EAI5B,IAJ4B,CAD/B;AAMD,KAXoC;AAAA;;AAY7BM,EAAAA,iBAAiB,GAAG;AAGhB,SAAKL,MAAL;AAED;;AACPM,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAmC,KAAKV,KAAL,CAAWC,SAA9C;AACE,wBACA,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAS,MAAA,EAAE,EAAE,KAAKU,KAAL,CAAWC,MAAX,GAAoB,QAApB,GAAgC,UAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,mBAAD;AACI,MAAA,IAAI,EAAG,KAAKD,KAAL,CAAWC,MAAX,GAAoBd,WAAW,CAAC,KAAKE,KAAL,CAAWC,SAAX,GAAuBH,WAAW,CAACe,MAApC,CAA/B,GAA6EhB,KAAK,CAAC,KAAKG,KAAL,CAAWC,SAAX,GAAuBJ,KAAK,CAACgB,MAA9B,CAD7F;AAEI,MAAA,MAAM,EAAEjB,OAAO,CAACkB,MAFpB;AAGI,MAAA,SAAS,EAAC,KAHd;AAII,MAAA,KAAK,EAAE,GAJX;AAKI,MAAA,MAAM,MALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADJ,CADA;AAaH;;AAjCgC;AAoCrC,eAAef,IAAf","sourcesContent":["import React, { Component } from 'react'\nimport ReactTextTransition, { presets } from \"react-text-transition\";\n\nconst texts = [\"Click\", \"or\", \"Die\"]\nconst secondtexts = [\"Click\", \"to\", \"Close\"]\nexport class Test extends Component  {\n    state = {\n        textIndex: 0\n        };\nremove = () => {\n  this.state.textIndex>10 ?  clearInterval(this.intervalID)\n  : this.intervalID = setInterval(() => {\n    this.setState({\n      textIndex: this.state.textIndex + 1,\n    });\n  }, 2000);\n}\n        componentDidMount() {\n          \n            \n            this.remove()\n            \n          }\n    render() {\n      console.log(\"this.state.textIndex\",this.state.textIndex)\n        return (\n        <React.Fragment>\n            <section id={this.props.isOpen ? \"hossik\" :  \"nohossik\"}>\n            <ReactTextTransition\n                text= {this.props.isOpen ? secondtexts[this.state.textIndex % secondtexts.length] : texts[this.state.textIndex % texts.length] }\n                spring={presets.gentle}\n                className=\"big\"\n                delay={300}\n                inline\n            />   \n            </section>\n        </React.Fragment>\n        )\n    }\n}\n\nexport default Test\n"]},"metadata":{},"sourceType":"module"}