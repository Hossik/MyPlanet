{"ast":null,"code":"\"use strict\";\n\nvar every = Array.prototype.every;\n\nmodule.exports = function calledInOrder(spies) {\n  var callMap = {};\n\n  function hasCallsLeft(spy) {\n    if (callMap[spy.id] === undefined) {\n      callMap[spy.id] = 0;\n    }\n\n    return callMap[spy.id] < spy.callCount;\n  }\n\n  if (arguments.length > 1) {\n    spies = arguments;\n  }\n\n  return every.call(spies, function checkAdjacentCalls(spy, i) {\n    var calledBeforeNext = true;\n\n    if (i !== spies.length - 1) {\n      calledBeforeNext = spy.calledBefore(spies[i + 1]);\n    }\n\n    if (hasCallsLeft(spy) && calledBeforeNext) {\n      callMap[spy.id] += 1;\n      return true;\n    }\n\n    return false;\n  });\n};","map":{"version":3,"sources":["/home/hoss/my App/my-app/node_modules/sinon/lib/sinon/util/core/called-in-order.js"],"names":["every","Array","prototype","module","exports","calledInOrder","spies","callMap","hasCallsLeft","spy","id","undefined","callCount","arguments","length","call","checkAdjacentCalls","i","calledBeforeNext","calledBefore"],"mappings":"AAAA;;AAEA,IAAIA,KAAK,GAAGC,KAAK,CAACC,SAAN,CAAgBF,KAA5B;;AAEAG,MAAM,CAACC,OAAP,GAAiB,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC3C,MAAIC,OAAO,GAAG,EAAd;;AAEA,WAASC,YAAT,CAAsBC,GAAtB,EAA2B;AACvB,QAAIF,OAAO,CAACE,GAAG,CAACC,EAAL,CAAP,KAAoBC,SAAxB,EAAmC;AAC/BJ,MAAAA,OAAO,CAACE,GAAG,CAACC,EAAL,CAAP,GAAkB,CAAlB;AACH;;AAED,WAAOH,OAAO,CAACE,GAAG,CAACC,EAAL,CAAP,GAAkBD,GAAG,CAACG,SAA7B;AACH;;AAED,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACtBR,IAAAA,KAAK,GAAGO,SAAR;AACH;;AAED,SAAOb,KAAK,CAACe,IAAN,CAAWT,KAAX,EAAkB,SAASU,kBAAT,CAA4BP,GAA5B,EAAiCQ,CAAjC,EAAoC;AACzD,QAAIC,gBAAgB,GAAG,IAAvB;;AAEA,QAAID,CAAC,KAAKX,KAAK,CAACQ,MAAN,GAAe,CAAzB,EAA4B;AACxBI,MAAAA,gBAAgB,GAAGT,GAAG,CAACU,YAAJ,CAAiBb,KAAK,CAACW,CAAC,GAAG,CAAL,CAAtB,CAAnB;AACH;;AAED,QAAIT,YAAY,CAACC,GAAD,CAAZ,IAAqBS,gBAAzB,EAA2C;AACvCX,MAAAA,OAAO,CAACE,GAAG,CAACC,EAAL,CAAP,IAAmB,CAAnB;AACA,aAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH,GAbM,CAAP;AAcH,CA7BD","sourcesContent":["\"use strict\";\n\nvar every = Array.prototype.every;\n\nmodule.exports = function calledInOrder(spies) {\n    var callMap = {};\n\n    function hasCallsLeft(spy) {\n        if (callMap[spy.id] === undefined) {\n            callMap[spy.id] = 0;\n        }\n\n        return callMap[spy.id] < spy.callCount;\n    }\n\n    if (arguments.length > 1) {\n        spies = arguments;\n    }\n\n    return every.call(spies, function checkAdjacentCalls(spy, i) {\n        var calledBeforeNext = true;\n\n        if (i !== spies.length - 1) {\n            calledBeforeNext = spy.calledBefore(spies[i + 1]);\n        }\n\n        if (hasCallsLeft(spy) && calledBeforeNext) {\n            callMap[spy.id] += 1;\n            return true;\n        }\n\n        return false;\n    });\n};\n"]},"metadata":{},"sourceType":"script"}