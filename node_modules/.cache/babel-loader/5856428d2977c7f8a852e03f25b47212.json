{"ast":null,"code":"\"use strict\";\n\nvar behavior = require(\"./behavior\");\n\nvar behaviors = require(\"./default-behaviors\");\n\nvar spy = require(\"./spy\");\n\nvar extend = require(\"./util/core/extend\");\n\nvar functionToString = require(\"./util/core/function-to-string\");\n\nvar getPropertyDescriptor = require(\"./util/core/get-property-descriptor\");\n\nvar wrapMethod = require(\"./util/core/wrap-method\");\n\nvar stubEntireObject = require(\"./stub-entire-object\");\n\nvar stubDescriptor = require(\"./stub-descriptor\");\n\nvar throwOnFalsyObject = require(\"./throw-on-falsy-object\");\n\nvar slice = Array.prototype.slice;\n\nfunction stub(object, property, descriptor) {\n  throwOnFalsyObject.apply(null, arguments);\n  var actualDescriptor = getPropertyDescriptor(object, property);\n  var isStubbingEntireObject = typeof property === \"undefined\" && typeof object === \"object\";\n  var isCreatingNewStub = !object && typeof property === \"undefined\";\n  var isStubbingDescriptor = object && property && Boolean(descriptor);\n  var isStubbingNonFuncProperty = (typeof object === \"object\" || typeof object === \"function\") && typeof property !== \"undefined\" && (typeof actualDescriptor === \"undefined\" || typeof actualDescriptor.value !== \"function\") && typeof descriptor === \"undefined\";\n  var isStubbingExistingMethod = !isStubbingDescriptor && typeof object === \"object\" && typeof actualDescriptor !== \"undefined\" && typeof actualDescriptor.value === \"function\";\n  var arity = isStubbingExistingMethod ? object[property].length : 0;\n\n  if (isStubbingEntireObject) {\n    return stubEntireObject(stub, object);\n  }\n\n  if (isStubbingDescriptor) {\n    return stubDescriptor.apply(null, arguments);\n  }\n\n  if (isCreatingNewStub) {\n    return stub.create();\n  }\n\n  var s = stub.create(arity);\n  s.rootObj = object;\n  s.propName = property;\n\n  s.restore = function restore() {\n    if (actualDescriptor !== undefined) {\n      Object.defineProperty(object, property, actualDescriptor);\n      return;\n    }\n\n    delete object[property];\n  };\n\n  return isStubbingNonFuncProperty ? s : wrapMethod(object, property, s);\n}\n\nstub.createStubInstance = function (constructor) {\n  if (typeof constructor !== \"function\") {\n    throw new TypeError(\"The constructor should be a function.\");\n  }\n\n  return stub(Object.create(constructor.prototype));\n};\n/*eslint-disable no-use-before-define*/\n\n\nfunction getParentBehaviour(stubInstance) {\n  return stubInstance.parent && getCurrentBehavior(stubInstance.parent);\n}\n\nfunction getDefaultBehavior(stubInstance) {\n  return stubInstance.defaultBehavior || getParentBehaviour(stubInstance) || behavior.create(stubInstance);\n}\n\nfunction getCurrentBehavior(stubInstance) {\n  var currentBehavior = stubInstance.behaviors[stubInstance.callCount - 1];\n  return currentBehavior && currentBehavior.isPresent() ? currentBehavior : getDefaultBehavior(stubInstance);\n}\n/*eslint-enable no-use-before-define*/\n\n\nvar uuid = 0;\nvar proto = {\n  create: function create(stubLength) {\n    var functionStub = function () {\n      var args = slice.call(arguments);\n      var matchings = functionStub.matchingFakes(args);\n      var fnStub = matchings.sort(function (a, b) {\n        return a.matchingArguments.length - b.matchingArguments.length;\n      }).pop() || functionStub;\n      return getCurrentBehavior(fnStub).invoke(this, arguments);\n    };\n\n    functionStub.id = \"stub#\" + uuid++;\n    var orig = functionStub;\n    functionStub = spy.create(functionStub, stubLength);\n    functionStub.func = orig;\n    extend(functionStub, stub);\n    functionStub.instantiateFake = stub.create;\n    functionStub.displayName = \"stub\";\n    functionStub.toString = functionToString;\n    functionStub.defaultBehavior = null;\n    functionStub.behaviors = [];\n    return functionStub;\n  },\n  resetBehavior: function () {\n    var fakes = this.fakes || [];\n    this.defaultBehavior = null;\n    this.behaviors = [];\n    delete this.returnValue;\n    delete this.returnArgAt;\n    delete this.throwArgAt;\n    delete this.fakeFn;\n    this.returnThis = false;\n    fakes.forEach(function (fake) {\n      fake.resetBehavior();\n    });\n  },\n  resetHistory: spy.reset,\n  reset: function () {\n    this.resetHistory();\n    this.resetBehavior();\n  },\n  onCall: function onCall(index) {\n    if (!this.behaviors[index]) {\n      this.behaviors[index] = behavior.create(this);\n    }\n\n    return this.behaviors[index];\n  },\n  onFirstCall: function onFirstCall() {\n    return this.onCall(0);\n  },\n  onSecondCall: function onSecondCall() {\n    return this.onCall(1);\n  },\n  onThirdCall: function onThirdCall() {\n    return this.onCall(2);\n  }\n};\nObject.keys(behavior).forEach(function (method) {\n  if (behavior.hasOwnProperty(method) && !proto.hasOwnProperty(method) && method !== \"create\" && method !== \"withArgs\" && method !== \"invoke\") {\n    proto[method] = behavior.createBehavior(method);\n  }\n});\nObject.keys(behaviors).forEach(function (method) {\n  if (behaviors.hasOwnProperty(method) && !proto.hasOwnProperty(method)) {\n    behavior.addBehavior(stub, method, behaviors[method]);\n  }\n});\nextend(stub, proto);\nmodule.exports = stub;","map":{"version":3,"sources":["/home/hoss/my App/my-app/node_modules/sinon/lib/sinon/stub.js"],"names":["behavior","require","behaviors","spy","extend","functionToString","getPropertyDescriptor","wrapMethod","stubEntireObject","stubDescriptor","throwOnFalsyObject","slice","Array","prototype","stub","object","property","descriptor","apply","arguments","actualDescriptor","isStubbingEntireObject","isCreatingNewStub","isStubbingDescriptor","Boolean","isStubbingNonFuncProperty","value","isStubbingExistingMethod","arity","length","create","s","rootObj","propName","restore","undefined","Object","defineProperty","createStubInstance","constructor","TypeError","getParentBehaviour","stubInstance","parent","getCurrentBehavior","getDefaultBehavior","defaultBehavior","currentBehavior","callCount","isPresent","uuid","proto","stubLength","functionStub","args","call","matchings","matchingFakes","fnStub","sort","a","b","matchingArguments","pop","invoke","id","orig","func","instantiateFake","displayName","toString","resetBehavior","fakes","returnValue","returnArgAt","throwArgAt","fakeFn","returnThis","forEach","fake","resetHistory","reset","onCall","index","onFirstCall","onSecondCall","onThirdCall","keys","method","hasOwnProperty","createBehavior","addBehavior","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar behavior = require(\"./behavior\");\nvar behaviors = require(\"./default-behaviors\");\nvar spy = require(\"./spy\");\nvar extend = require(\"./util/core/extend\");\nvar functionToString = require(\"./util/core/function-to-string\");\nvar getPropertyDescriptor = require(\"./util/core/get-property-descriptor\");\nvar wrapMethod = require(\"./util/core/wrap-method\");\nvar stubEntireObject = require(\"./stub-entire-object\");\nvar stubDescriptor = require(\"./stub-descriptor\");\nvar throwOnFalsyObject = require(\"./throw-on-falsy-object\");\n\nvar slice = Array.prototype.slice;\n\nfunction stub(object, property, descriptor) {\n    throwOnFalsyObject.apply(null, arguments);\n\n    var actualDescriptor = getPropertyDescriptor(object, property);\n    var isStubbingEntireObject = typeof property === \"undefined\" && typeof object === \"object\";\n    var isCreatingNewStub = !object && typeof property === \"undefined\";\n    var isStubbingDescriptor = object && property && Boolean(descriptor);\n    var isStubbingNonFuncProperty = (typeof object === \"object\" || typeof object === \"function\")\n                                    && typeof property !== \"undefined\"\n                                    && (typeof actualDescriptor === \"undefined\"\n                                    || typeof actualDescriptor.value !== \"function\")\n                                    && typeof descriptor === \"undefined\";\n    var isStubbingExistingMethod = !isStubbingDescriptor\n                                    && typeof object === \"object\"\n                                    && typeof actualDescriptor !== \"undefined\"\n                                    && typeof actualDescriptor.value === \"function\";\n    var arity = isStubbingExistingMethod ? object[property].length : 0;\n\n    if (isStubbingEntireObject) {\n        return stubEntireObject(stub, object);\n    }\n\n    if (isStubbingDescriptor) {\n        return stubDescriptor.apply(null, arguments);\n    }\n\n    if (isCreatingNewStub) {\n        return stub.create();\n    }\n\n    var s = stub.create(arity);\n    s.rootObj = object;\n    s.propName = property;\n    s.restore = function restore() {\n        if (actualDescriptor !== undefined) {\n            Object.defineProperty(object, property, actualDescriptor);\n            return;\n        }\n\n        delete object[property];\n    };\n\n    return isStubbingNonFuncProperty ? s : wrapMethod(object, property, s);\n}\n\nstub.createStubInstance = function (constructor) {\n    if (typeof constructor !== \"function\") {\n        throw new TypeError(\"The constructor should be a function.\");\n    }\n    return stub(Object.create(constructor.prototype));\n};\n\n/*eslint-disable no-use-before-define*/\nfunction getParentBehaviour(stubInstance) {\n    return (stubInstance.parent && getCurrentBehavior(stubInstance.parent));\n}\n\nfunction getDefaultBehavior(stubInstance) {\n    return stubInstance.defaultBehavior ||\n            getParentBehaviour(stubInstance) ||\n            behavior.create(stubInstance);\n}\n\nfunction getCurrentBehavior(stubInstance) {\n    var currentBehavior = stubInstance.behaviors[stubInstance.callCount - 1];\n    return currentBehavior && currentBehavior.isPresent() ? currentBehavior : getDefaultBehavior(stubInstance);\n}\n/*eslint-enable no-use-before-define*/\n\nvar uuid = 0;\n\nvar proto = {\n    create: function create(stubLength) {\n        var functionStub = function () {\n            var args = slice.call(arguments);\n            var matchings = functionStub.matchingFakes(args);\n\n            var fnStub = matchings.sort(function (a, b) {\n                return a.matchingArguments.length - b.matchingArguments.length;\n            }).pop() || functionStub;\n            return getCurrentBehavior(fnStub).invoke(this, arguments);\n        };\n\n        functionStub.id = \"stub#\" + uuid++;\n        var orig = functionStub;\n        functionStub = spy.create(functionStub, stubLength);\n        functionStub.func = orig;\n\n        extend(functionStub, stub);\n        functionStub.instantiateFake = stub.create;\n        functionStub.displayName = \"stub\";\n        functionStub.toString = functionToString;\n\n        functionStub.defaultBehavior = null;\n        functionStub.behaviors = [];\n\n        return functionStub;\n    },\n\n    resetBehavior: function () {\n        var fakes = this.fakes || [];\n\n        this.defaultBehavior = null;\n        this.behaviors = [];\n\n        delete this.returnValue;\n        delete this.returnArgAt;\n        delete this.throwArgAt;\n        delete this.fakeFn;\n        this.returnThis = false;\n\n        fakes.forEach(function (fake) {\n            fake.resetBehavior();\n        });\n    },\n\n    resetHistory: spy.reset,\n\n    reset: function () {\n        this.resetHistory();\n        this.resetBehavior();\n    },\n\n    onCall: function onCall(index) {\n        if (!this.behaviors[index]) {\n            this.behaviors[index] = behavior.create(this);\n        }\n\n        return this.behaviors[index];\n    },\n\n    onFirstCall: function onFirstCall() {\n        return this.onCall(0);\n    },\n\n    onSecondCall: function onSecondCall() {\n        return this.onCall(1);\n    },\n\n    onThirdCall: function onThirdCall() {\n        return this.onCall(2);\n    }\n};\n\nObject.keys(behavior).forEach(function (method) {\n    if (behavior.hasOwnProperty(method) &&\n        !proto.hasOwnProperty(method) &&\n        method !== \"create\" &&\n        method !== \"withArgs\" &&\n        method !== \"invoke\") {\n        proto[method] = behavior.createBehavior(method);\n    }\n});\n\nObject.keys(behaviors).forEach(function (method) {\n    if (behaviors.hasOwnProperty(method) && !proto.hasOwnProperty(method)) {\n        behavior.addBehavior(stub, method, behaviors[method]);\n    }\n});\n\nextend(stub, proto);\nmodule.exports = stub;\n"]},"metadata":{},"sourceType":"script"}